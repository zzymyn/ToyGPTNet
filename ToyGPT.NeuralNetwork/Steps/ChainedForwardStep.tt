<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CommunityToolkit.HighPerformance;

namespace ToyGPT.NeuralNetwork.Steps;

public static class ChainedForwardStep
{
<# for (int i = 2; i < 8; ++i) { #>
<# var types = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x}")); #>
<# var args = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x} v{x}")); #>
<# var values = string.Join(", ", Enumerable.Range(0, i).Select(x => $"v{x}")); #>
	public static ChainedForwardStep<<#=types#>> Create<<#=types#>>(<#=args#>)
<# for (int j = 0; j < i; ++j) { #>
		where T<#=j#> : INeuralNetworkForwardStep
<# } #>
	{
		return new(<#=values#>);
	}
<# } #>
}

<# for (int i = 2; i < 8; ++i) { #>
<# var types = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x}")); #>
<# var args = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x} v{x}")); #>

public class ChainedForwardStep<<#=types#>>
	: INeuralNetworkForwardStep
<# for (int j = 0; j < i; ++j) { #>
	where T<#=j#> : INeuralNetworkForwardStep
<# } #>
{
<# for (int j = 0; j < i; ++j) { #>
	private readonly T<#=j#> m_V<#=j#>;
<# } #>

	public ChainedForwardStep(<#=args#>)
	{
<# for (int j = 0; j < i; ++j) { #>
		m_V<#=j#> = v<#=j#>;
<# } #>
	}

	public ReadOnlyMemory2D<float> Outputs => m_V<#=i-1#>.Outputs;

	public ReadOnlyMemory2D<float> Forward(ReadOnlySpan2D<float> inputs)
	{
		var r0 = m_V0.Forward(inputs);
<# for (int j = 1; j < i; ++j) { #>
		var r<#=j#> = m_V<#=j#>.Forward(r<#=j-1#>.Span);
<# } #>
		return r<#=i-1#>;
	}
}

<# } #>
